{"version":3,"file":"static/js/593.c70ca2d6.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.jsx","components/ContactList/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","redux/contactsFilter/contacts.selectors.js","pages/ContactsPage.jsx","../node_modules/shortid/index.js","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js"],"sourcesContent":["import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { nameAction, numberAction, resetNameAction, resetNumberAction } from \"redux/contactForm/form.slice\";\nimport { Box } from '../Box';\n\nexport const ContactForm = ({ onSubmit }) => {\n    const dispatch = useDispatch();\n\n    const name = useSelector(state => state.form.name);\n    const number = useSelector(state => state.form.number);\n\n    const handleChange = e => {\n        const { name, value } = e.target;\n        switch (name) {\n            case 'name':\n                dispatch(nameAction(value));\n                break;\n            case 'number':\n                dispatch(numberAction(value));\n                break;\n            default:\n                return;\n        }\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        \n        onSubmit({ name: name, number: number });\n        reset();\n    };\n\n    const reset = () => {\n        dispatch(resetNameAction());\n        dispatch(resetNumberAction());\n    };\n\n    return (\n        <Box\n            as=\"form\"\n            bg=\"background\"\n            boxShadow=\"boxShadowSection\"\n            borderRadius=\"normal\"\n            overflow=\"hidden\"\n            p={4}\n            display=\"flex\"\n            flexDirection=\"column\"\n\n            onSubmit={handleSubmit}>\n            <Box\n                as=\"label\"\n                display=\"flex\"\n                flexDirection=\"column\"\n                mb={3}\n            >\n                Name\n                <Box\n                    as=\"input\"\n                    mt={3}\n                    p={2}\n                    border=\"none\"\n                    boxShadow=\"shadowStats\"\n                    borderRadius=\"normal\"\n                    fontFamily=\"body\"\n                    color=\"text\"\n                    type=\"text\"\n                    name=\"name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                    value={name}\n                    onChange={handleChange}\n                />\n            </Box>\n            <Box\n                as=\"label\"\n                display=\"flex\"\n                flexDirection=\"column\"\n                mb={4}\n            >\n                Number\n                <Box\n                    as=\"input\"\n                    mt={3}\n                    p={2}\n                    border=\"none\"\n                    boxShadow=\"shadowStats\"\n                    borderRadius=\"normal\"\n                    fontFamily=\"body\"\n                    color=\"text\"\n\n                    type=\"tel\"\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                    value={number}\n                    onChange={handleChange}\n                />\n            </Box>\n            <Box\n                as=\"button\"\n                border=\"none\"\n                boxShadow=\"buttonShadow\"\n                borderRadius=\"normal\"\n                bg=\"secondary\"\n                color=\"light\"\n                fontFamily=\"body\"\n                p={2}\n                type='submit'>\n                Add contact\n            </Box>\n        </Box>\n    );\n};","import React from \"react\";\nimport { Box } from \"components/Box\";\n\nexport const ContactItem = ({ contacts, onDeleteContact }) => {\n    return (<>\n        {contacts.map(({ name, id, number }) => (\n            <Box\n                as=\"li\"\n                display=\"flex\"\n                justifyContent=\"space-between\"\n                mb={2}\n                key={id}>\n                {name}: {number}\n                <Box\n                    as=\"button\"\n                    border=\"none\"\n                    boxShadow=\"buttonShadow\"\n                    borderRadius=\"normal\"\n                    bg=\"secondary\"\n                    color=\"light\"\n                    fontFamily=\"body\"\n                    fontSize={0}\n                    py={2}\n                    px={3}\n                    type=\"button\"\n                    onClick={() => onDeleteContact(id)}\n                >\n                    Delete\n                </Box>\n            </Box>\n        ))}\n    </>)\n};","import { Box } from \"components/Box\";\nimport React from \"react\";\nimport { ContactItem } from \"./ContactItem\";\n\nexport const ContactList = ({ contacts, onDeleteContact, children }) => {\n    return (\n        <Box\n            as=\"ul\"\n            p={4}\n            minHeight=\"contactListMinHeigth\"\n        >{children}\n            <ContactItem contacts={contacts} onDeleteContact={onDeleteContact}/>\n        </Box>\n    );\n};","import React from \"react\";\nimport { Box } from '../Box';\n\nexport const Filter = ({onChange, value}) => {\n    return (\n        <Box\n            p={4}\n            display=\"flex\"\n            flexDirection=\"column\"\n        >\n            Find contacts by name\n            <Box\n                as=\"input\"\n                mt={3}\n                p={2}\n                border=\"none\"\n                boxShadow=\"shadowStats\"\n                borderRadius=\"normal\"\n                fontFamily=\"body\"\n                color=\"text\"\n                type=\"text\"\n                value={value}\n                onChange={onChange} />\n        </Box>\n    );\n}","export const selectContacts = state => state.contacts.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.contacts.isLoading;\n\nexport const selectError = state => state.contacts.contacts.error;\n\nexport const selectFilter = state => state.contacts.filter;","import React, { useEffect, useMemo } from \"react\";\n\nimport shortid from 'shortid';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { filterInputAction } from 'redux/contactsFilter/contacts.slice';\nimport { addContact, fetchContacts, deleteContact } from \"redux/contactsFilter/contacts.thunk\";\nimport {\n  selectContacts,\n  selectError,\n  selectFilter,\n  selectIsLoading\n} from \"redux/contactsFilter/contacts.selectors\";\nimport { Box } from \"components/Box\";\n\nconst { ContactForm } = require(\"components/ContactForm\");\nconst { ContactList } = require(\"components/ContactList\");\nconst { Filter } = require(\"components/Filter\");\n\nconst ContactsPage = () => {\n\n    const dispatch = useDispatch();\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n    const filter = useSelector(selectFilter);\n    const contacts = useSelector(selectContacts);\n    \n    const changeFilter = e => {\n        dispatch(\n            filterInputAction(\n                e.target.value,\n            )\n        );\n    };\n    \n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    const formSubmitHandler = ({ name, number }) => {\n        const currentContact = { id: shortid.generate(), name: name, number: number }\n        const contactDublicate = contacts.find(c => c.name === currentContact.name);\n        if (contactDublicate) {\n            Notify.failure(`${currentContact.name} is allready in contacts.`);\n            return;\n        }\n        dispatch(addContact(currentContact));\n    };\n    \n    const visibleContacts = useMemo(() => {\n        return contacts.filter(n =>\n            n.name.toLowerCase().includes(filter.toLowerCase()),\n        );\n    }, [contacts, filter]);\n  \n    const deleteCurrentContact = id => {\n        dispatch(deleteContact(id));\n    };\n\n    return (\n        <Box\n        p={4}\n        display=\"flex\"\n        flexDirection=\"column\"\n        width=\"containerWidth\">\n            <h1>Phonebook</h1>\n            <ContactForm\n                onSubmit={formSubmitHandler}\n            />\n            <h2>Contacts</h2>\n            <Filter\n                value={filter}\n                onChange={changeFilter} />\n            <ContactList\n                contacts={visibleContacts}\n                onDeleteContact={deleteCurrentContact}>\n                {isLoading && !error && <p>Loading...</p>}\n                {!isLoading && !error && <p>Contacts list:</p>}\n                {!isLoading && error && <p>Sorry, something goe's wrong</p>}\n            </ContactList>\n        </Box>\n    );\n};\n\nexport default ContactsPage;","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nmodule.exports = 0;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n"],"names":["ContactForm","onSubmit","dispatch","useDispatch","name","useSelector","state","form","number","handleChange","e","target","value","nameAction","numberAction","reset","resetNameAction","resetNumberAction","Box","as","bg","boxShadow","borderRadius","overflow","p","display","flexDirection","preventDefault","mb","mt","border","fontFamily","color","type","pattern","title","required","onChange","ContactItem","contacts","onDeleteContact","map","id","justifyContent","fontSize","py","px","onClick","ContactList","children","minHeight","Filter","selectContacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","require","useEffect","fetchContacts","visibleContacts","useMemo","n","toLowerCase","includes","width","currentContact","shortid","find","c","Notify","addContact","filterInputAction","deleteContact","module","exports","alphabet","previousSeed","shuffled","randomFromSeed","ORIGINAL","setCharacters","_alphabet_","length","Error","unique","split","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","get","characters","seed","lookup","index","counter","previousSeconds","generate","clusterWorkerId","str","seconds","Date","now","random","format","done","loopCounter","pow","build","isValid","seedValue","worker","workerId","newCharacters","undefined","RegExp","replace","test","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","_seed_","mask","log","LN2","step"],"sourceRoot":""}